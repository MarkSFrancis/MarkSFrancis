using System.Security.Cryptography;
using MarkSFrancis;
using Phnx.Security.Extensions;
using Phnx.Security.Interfaces;

namespace Phnx.Security
{
    /// <summary>
    /// A 1024 bit PBKDF2 hashing algorithm. Suitable for passwords, but generally too slow for checksums. Consider using <see cref="Sha256Hash"/> if you're generating checksums
    /// </summary>
    public class Pbkdf2Hash : IHashWithSalt
    {
        /// <summary>
        /// The length of the hash generated by the algorithm
        /// </summary>
        public const int HashBytesLength = 128;

        /// <summary>
        /// The length of the salt required by the algorithm
        /// </summary>
        public int SaltBytesLength { get; }

        /// <summary>
        /// The number of times the algorithm is ran on data when using <see cref="Hash(byte[], byte[])"/>
        /// </summary>
        public int IterationCount { get; }

        /// <summary>
        /// Create a new <see cref="Pbkdf2Hash"/>
        /// </summary>
        /// <param name="iterationCount">The number of times to run the algorithm when hashing data</param>
        public Pbkdf2Hash(int iterationCount = 1024)
        {
            SaltBytesLength = 24;

            IterationCount = iterationCount;
        }

        /// <summary>
        /// Generate a salt for use with this algorithm
        /// </summary>
        /// <returns></returns>
        public byte[] GenerateSalt()
        {
            return SecureRandomBytes.Generate(SaltBytesLength);
        }

        /// <summary>
        /// Hash data using a salt
        /// </summary>
        /// <param name="data">The data to hash</param>
        /// <param name="salt">The salt to use. This must have the same length as <see cref="SaltBytesLength"/></param>
        /// <returns></returns>
        public byte[] Hash(byte[] data, byte[] salt)
        {
            if (salt.Length != SaltBytesLength)
            {
                throw ErrorFactory.Default.InvalidSaltSize(SaltBytesLength, salt.Length);
            }

            using (var pbkdf2 = new Rfc2898DeriveBytes(data, salt, IterationCount))
            {
                return pbkdf2.GetBytes(HashBytesLength);
            }
        }
    }
}
