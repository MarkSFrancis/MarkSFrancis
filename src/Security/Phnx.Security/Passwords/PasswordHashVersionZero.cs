namespace Phnx.Security.Passwords
{
    /// <summary>
    /// A hash generator with a version of zero. Uses <see cref="Pbkdf2Hash"/> with 1024 iterations
    /// </summary>
    public sealed class PasswordHashVersionZero : IPasswordHashVersion
    {
        /// <summary>
        /// The version of this hashing algorithm
        /// </summary>
        public int Version => 0;

        /// <summary>
        /// The length of the hash produced by this algorithm
        /// </summary>
        public int HashBytesLength => 128;

        /// <summary>
        /// The length of the salt needed/ generated by this algorithm
        /// </summary>
        public int SaltBytesLength => 24;

        /// <summary>
        /// The number of times this hash is ran on any passwords
        /// </summary>
        public int IterationCount => _hashGenerator.IterationCount;

        private readonly Pbkdf2Hash _hashGenerator;

        /// <summary>
        /// Create a new instance of <see cref="PasswordHashVersionZero"/>
        /// </summary>
        public PasswordHashVersionZero()
        {
            _hashGenerator = new Pbkdf2Hash(1024);
        }

        /// <summary>
        /// Generate a hash from a password and salt
        /// </summary>
        /// <param name="password">The password to hash</param>
        /// <param name="salt">The salt to use</param>
        /// <returns></returns>
        public byte[] GenerateHash(byte[] password, byte[] salt)
        {
            return _hashGenerator.Hash(password, salt);
        }

        /// <summary>
        /// Generate a random salt
        /// </summary>
        /// <returns></returns>
        public byte[] GenerateSalt()
        {
            return _hashGenerator.GenerateSalt();
        }
    }
}